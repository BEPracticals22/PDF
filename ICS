  < Laboratory Practice-III (410254)                                                                             Class : BE(Computer)
>



ZEAL EDUCATION SOCIETY’s
ZEAL COLLEGE OF ENGINEEIRNG AND RESEARCH, NARHE, PUNE

DEPARTMENT OF COMPUTER ENGINEERING
SEMESTER-II
[A.Y. : 2021 - 2022]


Laboratory Practice-III (410254)

LABORATORY MANUAL



















Institute and Department Vision and Mission


INSTITUTE
VISION
To impart value added technological education through pursuit of academic excellence, research and entrepreneurial attitude.
INSTITUTE
MISSION

M1: To achieve academic excellence through innovative teaching and learning process.
M2: To imbibe the research culture for addressing industry and societal needs.
M3: To provide conducive environment for building the entrepreneurial skills.
M4: To produce competent and socially responsible professionals with core human values.


DEPARTMENT VISION
To emerge as a department of repute in Computer Engineering which produces competent professionals and entrepreneurs to lead technical and betterment of mankind.
DEPARTMENT
MISSION
M1: To strengthen the theoretical and practical aspects of the learning process by teaching applications and hands on practices using modern tools and FOSS technologies.
 
M2: To endavor innovative interdisciplinary research and entrepreneurship skills to serve the needs of Industry and Society.

M3: To enhance industry academia dialog enabling students to inculcate professional skills.
M4: To incorporate social and ethical awareness among the students to make them conscientious professionals.













Department 
Program Educational Objectives(PEOs)




PEO1: To Impart fundamentals in science, mathematics and engineering to cater the needs of society and Industries.
PEO2: Encourage graduates to involve in research, higher studies, and/or to become entrepreneurs.
PEO3: To Work effectively as individuals and as team members in a multidisciplinary environment with high ethical values for the benefit of society.





























<Department of Computer Engineering , ZCOER, Narhe, Pune-41                                                           >	Page 2



 Assignment No 1

AIM: Implementation of S- Data Encryption Standard.
Theory: The Data Encryption Standard (DES) is a symmetric-key block cipher published by the National Institute of Standards and Technology (NIST).
DES is an implementation of a Feistel Cipher. It uses 16 round Feistel structure. The block size is 64-bit. Though, key length is 64-bit, DES has an effective key length of 56 bits, since 8 of the 64 bits of the key are not used by the encryption algorithm (function as check bits only). General Structure of DES is depicted in the following illustration –



Since DES is based on the Feistel Cipher, all that is required to specify DES is −
· Round function
· Key schedule
· Any additional processing − Initial and final permutation
Initial and Final Permutation
The initial and final permutations are straight Permutation boxes (P-boxes) that are inverses of each other. They have no cryptography significance in DES. The initial and final permutations are shown as follows −

Round Function
The heart of this cipher is the DES function, f. The DES function applies a 48-bit key to the rightmost 32 bits to produce a 32-bit output.


PROGRAM :
           

	pip install pyDes
	
	import pyDes
data=input("enter plain text for encryption")
key=input("enter 16/24 byte string for key generation")
k=pyDes.triple_des(key)
e=k.encrypt(data)
print("cipher text:%r"%e)
print("plain text%r"%k.decrypt(e))



OUTPUT:

enter plain text for encryptionhowareyouiamnaks 
enter 16/24 byte string for key generationhowareyouiamfine
 Cipher text:b'*\x13W(\xe2\x83i!\xbf\xdf\x8a\xcdo\xc6\xa5\xba' 
plain textb'howareyouiamnaks'















CONCLUSION: 
Hence, We have successfully studied S- Data Encryption Standard.









Signature
Practical In-charge


 Assignment No 2
	
AIM: Implementation of S- Advances Encryption Standard algorithm.
PROBLEM STATEMENT: Implement a single AES algorithm which is a symmetric (secret key) encryption algorithm, it means same key is used for both encryption and decryption.
THEORY:

AES uses a block length of 128 bits and a key length that can be 128, 192, or 256 bits. In the description of this section, we assume a key length of 128 bits, which is likely to be the one most commonly implemented. Figure shows the overall structure of AES. The input to the encryption and decryption algorithms is a single 128-bit block. In FIPS PUB 197, this block is depicted as a square matrix of bytes. This block is copied into the State array, which is modified at each stage of encryption or decryption. After the final stage, State is copied to an output matrix. Similarly, the 128-bit key is depicted as a square matrix of bytes. This key is then expanded into an array of key schedule words: each word is four bytes and the total key schedule is 44 words for the 128-bit key. The ordering of bytes within amatrix is by column. So, for example, the first four bytes of a 128-bit plaintext input to the encryption cipher occupy the first column of the in matrix, the second four bytes occupy the second column, and so on. Similarly, the first four bytes of the expanded key, which form a word, occupy the first column of the w matrix.

The following comments give some insight into AES.
1. One noteworthy feature of this structure is that it is not a Feistel structure. Recall that in the classic Feistel structure, half of the data block is used to modify the other half of the data block, and then the halves are swapped. AES does not use a Feistel structure but processes the entire data block in parallel during each round using substitutions and permutation.
2. The key that is provided as input is expanded into an array of forty-four 32-bit words, w[i]. Four distinct words (128 bits) serve as a round key for each round.
3. Four different stages are used, one of permutation and three of substitution:
· Substitute bytes: Uses a table, referred to as an S-box,4 to perform a byte-by-byte substitution of the block.
· Shift rows: A simple permutation that is performed row by row.
· Mix columns: A substitution that alters each byte in a column as a function of all of the bytes in the column.
· Add round key: A simple bitwise XOR of the current block with a portion of the expanded key.

4. The structure is quite simple. For both encryption and decryption, the cipher begins with an Add Round Key stage, followed by nine rounds that each includes all four stages, followed by a tenth round of three stages. Figure 2.6 depicts the structure of a full encryption round.



5. Only the Add Round Key stage makes use of the key. For this reason, the cipher begins and ends with an Add Round Key stage. Any other stage, applied at the beginning or end, is reversible without knowledge of the key and so would add no security.
6. The Add Round Key stage by itself would not be formidable. The other three stages together scramble the bits, but by themselves, they would provide no security because they do not use the key. We can view the cipher as alternating operations of XOR encryption (Add Round Key) of a block, followed by scrambling of the block (the other three stages), followed by XOR encryption, and so on. This scheme is both efficient and highly secure.
7. Each stage is easily reversible. For the Substitute Byte, Shift Row, and Mix Columns stages, an inverse function is used in the decryption algorithm. For the Add Round Key stage, the inverse is achieved by XORing the same round key to the block, using the result that A B B A.
8. As with most block ciphers, the decryption algorithm makes use of the expanded key in reverse order. However, the decryption algorithm is not identical to the encryption algorithm. This is a consequence of the particular structure of AES.
9. Once it is established that all four stages are reversible, it is easy to verify that decryption does recover the plaintext. Figure lays out encryption and decryption going in opposite vertical directions. At each horizontal point (e.g., the dashed line in the figure), State is the same for both encryption and decryption.
10. The final round of both encryption and decryption consists of only three stages. Again, this is a consequence of the particular structure of AES and is required to make the cipher reversible.



PROGRAM:
pip install pycryptodome
pip install pycrypto

from Crypto.Cipher import AES
#key has to be either 16, 24 or 32 bytes
def paddedKey(key):
 while len(key) % 8 !=0:
    key +=' '
 return key

#text has to in multiples of 26 bytes
def paddedText(text):
 while len(text) % 16 != 0:
    text += ' '
 return text
plain_input = input("Enter the text to be encrypted: ")
plain = paddedText(plain_input)
key_input = input("Enter in a key between 16 and 32 characters: ")
key = paddedKey(key_input)
if(len(key_input)< 16 & len(key_input)> 32):
    print("key must be between 16 and 32 characters!")
cipher = AES.new(key,AES.MODE_ECB)
ciphertext = cipher.encrypt(plain)
print("Cipher Text:%r"%ciphertext)
cleartext = cipher.decrypt(ciphertext),
print("Clear Text:%r"%cleartext)  
	
OUTPUT:



Enter the text to be encrypted: nakshatraumeshga
Enter in a key between 16 and 32 characters: namemidnamesname 
Cipher Text:b"\x98\xc3\x11\xdb'\x8e\x19\xe3|2\x05\xf4\xf4j\xdf\xc6" 
Clear Text:b'nakshatraumeshga'










CONCLUSION: 
Hence, We have successfully studied S- Advances Encryption Standard algorithm.












Signature
Practical In-charge


 Assignment No 3

AIM: Implementation of Diffie-Hellman key exchange (exponential key exchange)
PROBLEM STATEMENT: To implement Diffie-Hellman, the two end users, while communicating over a channel they know to be private, mutually agree on positive whole numbers p and q, such that p is a prime number and q is a generator of p. The generator q is a number that, when raised to positive whole-number powers less than p, never produces the same result for any two such whole numbers. The value of p may be large but the value of q is usually small

THEORY:-

Diffie-Hellman  key  exchange,  also  called  exponential  key  exchange,  is  a  method   of digital encryption that uses numbers raised to specific powers to produce decryption keys on the basis of components that are never directly transmitted, making the task of a would-be code breaker mathematically overwhelming.
To implement Diffie-Hellman, the two end users Alice and Bob, while communicating over a channel they know to be private, mutually agree on positive whole numbers p and q, such that p is a prime number and q is a generator of p. The generator q is a number that, when raised to positive whole-number powers less than p, never produces the same result for any two such whole numbers. The value of p may be large but the value of q is usually small.
Once Alice and Bob have agreed on p and q in private, they choose positive whole-number personal keys a and b, both less than the prime-number modulus p. Neither user divulges their personal key to anyone; ideally they memorize these numbers and do not write them down or store them anywhere. Next, Alice and Bob compute public keys a*and b* based on their  personal keys according to the formulas
a* = qa mod p
and
b* = qb mod p

The two users can share their public keys a* and b* over a communications medium assumed to be insecure, such as the Internet or a corporate wide area network (WAN). From these public keys, a number x can be generated by either user on the basis of their own personal keys. Alice computes x using the formula
x = (b*)a mod p
Bob computes x using the formula
x = (a*)b mod p
The value of x turns out to be the same according to either of the above two formulas. However, the personal keys a and b, which are critical in the calculation of x, have not been transmitted over a public medium. Because it is a large and apparently random number, a potential hacker has almost no chance of correctly guessing x, even with the help of a powerful computer to conduct millions of trials. The two users can therefore, in theory, communicate privately over a public medium with an encryption method of their choice using the decryption key x
PROGRAM:
#diffie Hellman key exchange algorithm
n=int(input("enter prime number(n)"))
g=int(input("enter base prime number(g)"))
alicesecret=int(input("enter Alice secret key(x)"))
bobsecret=int(input("enter Bob secret key(y)"))
print("publicly shared prime(n):",n)
print("publicly shared prime(g):",g)
print("Alice Secret key:",alicesecret)
print("Bob Secrete key:",bobsecret)
#Alice sends number A to Bob A=g^x mod n
A=(g**alicesecret)% n
print("\n Alice sends (A) to Bob:",A)
#Bob sends number B to Alice B=g^y mod n
B=(g**bobsecret)% n
print("\n Bob sends (B) to Alice:",B)
#Alice computes shared secret key K1=B^x mod n
alicesecretkey=(B**alicesecret)%n
print("\n Alice shared secret:",alicesecretkey)
#Bob computes shared secret key K2=A^y mod n
bobsecretkey=(A**bobsecret)%n
print("\n Bob shared secret:",bobsecretkey)
OUTPUT:

enter prime number(n)23 
enter base prime number(g)3 
enter Alice secret key(x)5 
enter Bob secret key(y)4 
publicly shared prime(n): 23 
publicly shared prime(g): 3 
Alice Secret key: 5 
Bob Secrete key: 4 
Alice sends (A) to Bob: 13 
Bob sends (B) to Alice: 12 
Alice shared secret: 18 
Bob shared secret: 18























CONCLUSION: 

Hence, We have studied Diffie-Hellman key exchange (exponential key exchange).








Signature
Practical In-charge


 Assignment No 4

AIM : Implementation of  RSA encryption /decryption algorithm.
PROBLEM STATEMENT: To generate the key pair i.e. public key and private key for encryption and decryption implement RSA encryption /decryption algorithm.
THEORY:

The two most widely used public-key algorithms are RSA and Diffie-Hellman. The RSA is a Public-Key Encryption Algorithm. The RSA scheme has since that time reigned supreme as the most widely accepted and implemented approach to public-key encryption. RSA is a block cipher in which the plaintext and ciphertext are integers between 0 and n - 1 for some n. Encryption and decryption are of the following form period for some plaintext block M and ciphertext block C:
C = Me mod n
M = C d mod n = (M e ) d mod n = M ed mod n
Both sender and receiver must know the values of n and e, and only the receiver knows the value of d. This is a public-key encryption algorithm with a public key of KU = {e, n} and a private key of KR = {d, n}. For this algorithm to be satisfactory for public-key encryption, the following requirements must be met.
1. It is possible to find values of e, d, n such that M ed mod n = M for all M < n.
2. It is relatively easy to calculate M e and C d for all values of M < n.
3. It is infeasible to determine d given e and n.

The first two requirements are easily met. The third requirement can be meet for large values of e and n. Begin by selecting two prime numbers p and q and calculating their product n, which is the modulus for encryption and decryption. Next, we need the quantity f(n), referred to as the Euler Totient of n, which is the number of positive integers less than n and relatively prime to n. Then select an integer e that is relatively prime to f(n) [i.e., the greatest common divisor of e and f(n) is 1]. Finally, calculate d as the multiplicative inverse of e, modulo f(n). It can be shown that d and e have the desired properties.
Suppose that user A has published its public key and that user B wishes to send the message M  to A. Then B calculates C = M e (mod n) and transmits C. On receipt of this cipher text, user A decrypts by calculating M = C d (mod n).
	 For this example, the keys were generated as follows:

1. Select two prime numbers, p = 17 and q = 11.

2. Calculate n = pq = 17 × 11 = 187.

3. Calculate f(n) = (p - 1)(q - 1) = 16 × 10 = 160.

4. Select e such that e is relatively prime to f(n) = 160 and less than f(n); we choose e = 7.

5. Determine d such that de mod 160 = 1 and d < 160. The correct value is d = 23, because 23 × 7 = 161 = (1 × 160) + 1.
The resulting keys are public key PU = {7, 187} and private key PR = {23, 187}. The example shows the use of these keys for a plain text input of M = 88. For encryption, we need to calculate C = 88 7 mod 187. Exploiting the properties of modular arithmetic, we can do this as follows:
88 7 mod 187 = [(88 4 mod 187) × (88 2 mod 187) × (88 1 mod 187)] mod 187

88 1 mod 187 = 88

88 2 mod 187 = 7744 mod 187 = 77

88 4 mod 187 = 59,969,536 mod 187 = 132

88 7 mod 187 = (88 × 77 × 132) mod 187 = 894,432 mod 187 = 11

There are two possible approaches to defeating the RSA algorithm. The first is the brute-force approach: Try all possible private keys. Thus, the larger the number of bits in e and d, the more secure the algorithm 
Steps of The RSA Algorithm Key Generation
· p and q both prime, p ≠ q
· Select p, q
· Calculate n = p × q
· Calculate φ (n) = (p – 1)(q – 1)
· Select integer e gcd ( φ (n), e) = 1; 1 < e < φ (n)
· Calculate d de mod φ (n) = 1
· Public key KU = {e, n}
Private key KR = {d, n }
Encryption

· Plaintext: M < n
· Ciphertext: C = M e (mod n)

Decryption

· Ciphertext: C
· Plaintext: M = C d (mod n)

PROGRAM :
def gcd(a, b): # calculates GCD of a and d
 while b != 0:
    c = a % b
    a = b
    b = c
    return a
def modinv(a, m): # calculates modulo inverse of a for mod m
  for x in range(1, m):
    if (a * x) % m == 1:
      return x
  return None
def coprimes(a): # calculates all possible co-prime numbers with a
 l = []
 for x in range(2, a):
  if gcd(a, x) == 1 and modinv(x, phi) != None:
    l.append(x)
 for x in l:
  if x == modinv(x, phi):
    l.remove(x)
 return l
def encrypt_block(m): # encrypts a single block
 c = m ** e % n
 return c
def decrypt_block(c): # decrypts a single block
 m = c ** d % n
 return m
def encrypt_string(s): # applies encryption
 return ''.join([chr(encrypt_block(ord(x))) for x in list(s)])
def decrypt_string(s): # applies decryption
 return ''.join([chr(decrypt_block(ord(x))) for x in list(s)])
if __name__ == "__main__":
 p = int(input('Enter prime p: '))
 q = int(input('Enter prime q: '))
 print("Choosen primes:\np=" + str(p) + ", q=" + str(q) + "\n")
 n = p * q
 print("n = p * q = " + str(n) + "\n")
 phi = (p - 1) * (q - 1)
 print("Euler's function (totient) [phi(n)]: " + str(phi) + "\n")
 print("Choose an e from a below coprimes array:\n")
 print(str(coprimes(phi)) + "\n")
 e = int(input())
 d = modinv(e, phi) # calculates the decryption key d
 print("\nYour public key is a pair of numbers (e=" + str(e) + ", n=" + str(n) + ").\n")
 print("Your private key is a pair of numbers (d=" + str(d) + ", n=" + str(n) + ").\n")
 s = input("Enter a message to encrypt: ")
 print("\nPlain message: " + s + "\n")
 enc = encrypt_string(s)
 print("Encrypted message: ", enc, "\n")
 dec = decrypt_string(enc)
 print("Decrypted message: %r"  %dec  )

OUTPUT:
Enter prime p: 23 
Enter prime q: 47 
Choosen primes: 
p=23, q=47 
n = p * q = 1081 
Euler's function (totient) [phi(n)]: 1012 
Choose an e from a below coprimes array: 
[] 
3 
Your public key is a pair of numbers (e=3, n=1081). 
Your private key is a pair of numbers (d=675, n=1081). 
Enter a message to encrypt: I AM NAKSHATRAUG 
Plain message: I AM NAKSHATRAUG 
Encrypted message: ΪŒ3şŒв3ĝϻį3ļ:3ud 
Decrypted message: 'I AM NAKSHATRAUG'

















CONCLUSION: 


Hence, we have studied RSA encryption /decryption algorithm.








Signature
Practical In-charge


